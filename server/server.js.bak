const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const winston = require('winston');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const mongoose = require('mongoose');
require('dotenv').config();

// Import routes
const authRoutes = require('./routes/auth');
const deviceRoutes = require('./routes/devices');

// Import services
const mqttService = require('./services/mqttService');
// const schedulerService = require('./services/schedulerService');  // Commented out until implemented
// const aiService = require('./services/aiService');  // Commented out until implemented

// Express app setup
const app = express();

// Apply middleware
app.use(cors({
  origin: 'http://localhost:5173',
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Configure MongoDB
mongoose.set('strictQuery', false);

// Initialize database and start server
const initializeServer = async () => {
  try {
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000,
      family: 4
    });
    console.log('Connected to MongoDB successfully');

    // Create initial test data
    const Device = require('./models/Device');
    const Room = require('./models/Room');
    const User = require('./models/User');

    // Create test user
    const testUser = await User.findOneAndUpdate(
      { email: 'test@example.com' },
      {
        name: 'Test User',
        email: 'test@example.com',
        password: 'password123'
      },
      { upsert: true, new: true }
    );
    console.log('Test user created/updated');
  console.log('Connected to MongoDB successfully');
  
  // Create test data
  const Device = require('./models/Device');
  const Room = require('./models/Room');
  const User = require('./models/User');

  // Create test user
  const testUser = await User.findOneAndUpdate(
    { email: 'test@example.com' },
    {
      name: 'Test User',
      email: 'test@example.com',
      password: 'password123'
    },
    { upsert: true, new: true }
  );

  // Create test room
  const testRoom = await Room.findOneAndUpdate(
    { name: 'Living Room' },
    {
      name: 'Living Room',
      type: 'living',
      userId: testUser._id
    },
    { upsert: true, new: true }
  );

  // Create test device
  await Device.findOneAndUpdate(
    { name: 'Test Light' },
    {
      name: 'Test Light',
      type: 'light',
      brand: 'Test Brand',
      model: 'Test Model',
      status: false,
      userId: testUser._id,
      roomId: testRoom._id
    },
    { upsert: true, new: true }
  );

  console.log('Test data initialized successfully');
})
.catch(error => {
  console.error('MongoDB connection error:', error);
  process.exit(1);
});
  try {
    console.log('Attempting to connect to MongoDB...');
    console.log('MongoDB URI:', process.env.MONGODB_URI);
    
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000,
      family: 4  // Force IPv4
    });
    
    console.log('Connected to MongoDB successfully');
    
    // Create initial test data
    const Device = require('./models/Device');
    const Room = require('./models/Room');
    const User = require('./models/User');

    // Create test user
    const testUser = await User.findOneAndUpdate(
      { email: 'test@example.com' },
      {
        name: 'Test User',
        email: 'test@example.com',
        password: 'password123'
      },
      { upsert: true, new: true }
    );

    // Create test room
    const testRoom = await Room.findOneAndUpdate(
      { name: 'Living Room' },
      {
        name: 'Living Room',
        type: 'living',
        userId: testUser._id
      },
      { upsert: true, new: true }
    );

    // Create test device
    await Device.findOneAndUpdate(
      { name: 'Test Light' },
      {
        name: 'Test Light',
        type: 'light',
        brand: 'Test Brand',
        model: 'Test Model',
        status: false,
        userId: testUser._id,
        roomId: testRoom._id
      },
      { upsert: true, new: true }
    );

    console.log('Test data initialized successfully');
  } catch (error) {
    console.error('MongoDB connection error:', error);
    process.exit(1);
  }
};

// Connect to MongoDB
connectDB();
  
  // Create test data
  try {
    const Device = require('./models/Device');
    const Room = require('./models/Room');
    const User = require('./models/User');

    // Create test user if not exists
    let testUser = await User.findOne({ email: 'test@example.com' });
    if (!testUser) {
      testUser = await User.create({
        name: 'Test User',
        email: 'test@example.com',
        password: 'password123'
      });
    }

    // Create test room if not exists
    let testRoom = await Room.findOne({ name: 'Living Room' });
    if (!testRoom) {
      testRoom = await Room.create({
        name: 'Living Room',
        userId: testUser._id
      });
    }

    // Create test device if not exists
    const testDevice = await Device.findOne({ name: 'Test Light' });
    if (!testDevice) {
      await Device.create({
        name: 'Test Light',
        type: 'light',
        brand: 'Test Brand',
        model: 'Test Model',
        status: false,
        userId: testUser._id,
        roomId: testRoom._id
      });
    }

    console.log('Test data created successfully');
  } catch (error) {
    console.error('Error creating test data:', error);
  }
})
.catch((error) => {
  console.error('MongoDB connection error:', error.message);
  console.error('Full error:', error);
});

// Import middleware
const authMiddleware = require('./middleware/auth');
const errorHandler = require('./middleware/errorHandler');

const app = express();

// Apply middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Apply CORS middleware with specific options
app.use(cors({
  origin: 'http://localhost:5173', // Vite's default port
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Mount routes with error handling
app.use('/api/devices', async (req, res, next) => {
  try {
    // Check database connection
    if (mongoose.connection.readyState !== 1) {
      throw new Error('Database not connected');
    }
    
    // Get or create test user
    const User = require('./models/User');
    const testUser = await User.findOne({ email: 'test@example.com' });
    
    if (!testUser) {
      throw new Error('Test user not found');
    }
    
    // Add user to request
    req.user = testUser;
    next();
  } catch (error) {
    console.error('Middleware error:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'Internal server error'
    });
  }
}, deviceRoutes);

app.use('/api/auth', authRoutes);

// Create HTTP server
const server = http.createServer(app);

// Configure Socket.IO with CORS
const io = socketIo(server, {
  cors: {
    origin: process.env.CLIENT_URL || "http://localhost:3000",
    methods: ["GET", "POST"],
    credentials: true
  }
});

// Basic CORS setup
app.use(cors({
  origin: process.env.CLIENT_URL || "http://localhost:3000",
  credentials: true
}));

// Body parser
app.use(express.json());

// Routes
app.use('/api/devices', deviceRoutes);

// WebSocket connection handling
io.on('connection', (socket) => {
  console.log('New client connected');

  socket.on('deviceControl', (data) => {
    console.log('Device control:', data);
    // Broadcast the update to all clients
    io.emit('deviceStatusUpdate', data);
  });

  socket.on('disconnect', () => {
    console.log('Client disconnected');
  });
});

// Basic error handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});

// Set port
const PORT = process.env.PORT || 5000;

// Logger setup
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' }),
    new winston.transports.Console({
      format: winston.format.simple()
    })
  ]
});

// Middleware
app.use(helmet());
app.use(cors({
  origin: process.env.CLIENT_URL || "http://localhost:3000",
  credentials: true
}));

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use(limiter);

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Make io accessible in routes
app.use((req, res, next) => {
  req.io = io;
  next();
});

// Database connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/smarthome', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => logger.info('Connected to MongoDB'))
.catch(err => logger.error('MongoDB connection error:', err));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/devices', authMiddleware, deviceRoutes);
// app.use('/api/rooms', authMiddleware, roomRoutes);  // Commented out until implemented
// app.use('/api/schedules', authMiddleware, scheduleRoutes);  // Commented out until implemented
// app.use('/api/water', authMiddleware, waterRoutes);  // Commented out until implemented
// app.use('/api/solar', authMiddleware, solarRoutes);  // Commented out until implemented

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// Socket.IO connection handling
io.use(async (socket, next) => {
  try {
    const token = socket.handshake.auth.token;
    // Verify JWT token here
    next();
  } catch (err) {
    next(new Error('Authentication error'));
  }
});

io.on('connection', (socket) => {
  logger.info(`Client connected: ${socket.id}`);

  socket.on('deviceControl', async (data) => {
    const { deviceId, command, value } = data;

    try {
      // Update device in database
      // Send MQTT command to actual device
      // Broadcast update to all clients

      io.emit('deviceStatusUpdate', {
        deviceId,
        status: value,
        timestamp: new Date().toISOString()
      });

      logger.info(`Device control: ${deviceId} -> ${command}: ${value}`);
    } catch (error) {
      logger.error('Device control error:', error);
      socket.emit('deviceControlError', { deviceId, error: error.message });
    }
  });

  socket.on('activateScene', async (data) => {
    const { sceneId } = data;
    // Implement scene activation logic
    logger.info(`Scene activated: ${sceneId}`);
  });

  socket.on('disconnect', () => {
    logger.info(`Client disconnected: ${socket.id}`);
  });
});

// Initialize services
mqttService.connect();
// schedulerService.start();  // Commented out until implemented
// aiService.initialize();  // Commented out until implemented

// Error handling
app.use(errorHandler);

// Start server
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

module.exports = { app, server, io };